htpasswd -c -b -B htpasswd admin redhat
htpasswd -b -B htpasswd developer developer
oc create secret generic htpasswd-secret -n openshift-config --from-file htpasswd
oc replace -f oauth.yaml 
oc get oauth cluster -o yaml
oc adm policy add-cluster-role-to-user cluster-admin admin
oc get pod -n openshift-authentication
oc get pod -n openshift-authentication -w
oc get pod -n openshift-authentication 
oc login -u admin -p redhat
oc get nodes
cd
lab auth-provider finish
oc login -u admin -p redhat
oc describe clusterrolebindings self-provisioners
oc login -u leader -p redhat
oc new-project auth-rbac
 oc login -u admin -p redhat
oc new-project auth-rbac
 oc policy add-role-to-user admin leader
 oc adm groups new dev-group
 oc adm groups add-users dev-group developer
oc adm groups new qa-group
 oc adm groups add-users qa-group qa-engineer
oc get groups
oc login -u leader -p redhat
oc policy add-role-to-group edit dev-group
oc policy add-role-to-group view qa-group
oc login -u developer -p developer
oc new-app --name httpd httpd:2.4
oc policy add-role-to-user edit qa-engineer
oc login -u qa-engineer -p redhat
oc scale deployment httpd --replicas 3
history
oc whoami
oc whoami -c
oc adm policy add-cluster-role-to-user cluster-admin admin
 oc login -u admin -p 'L@bR3v!ew'
oc get nodes
oc login -u developer -p 'L@bR3v!ew'
oc get nodes
 oc login -u admin -p 'L@bR3v!ew'
oc adm policy remove-cluster-role-from-group self-provisioner system:authenticated:oauth
oc adm groups new managers
oc adm groups add-users managers leader
oc adm policy add-cluster-role-to-group self-provisioner managers
oc login -u leader -p 'L@bR3v!ew'
oc new-project auth-review
 oc login -u admin -p 'L@bR3v!ew'
oc adm groups new developers
oc adm groups add-users developers developer
oc policy add-role-to-group edit developers
 oc adm groups new qa
oc adm groups add-users qa tester
oc policy add-role-to-group view qa
oc get nodes
history | grep role
history | grep role | grep get
oc login -u developer -p developer https://api.ocp4.example.com:6443
oc new-project authorization-secrets
oc create secret generic mysql 
--from-literal user=myuser --from-literal password=redhat123 
--from-literal database=test_secrets --from-literal hostname=mysql
oc login -u developer -p developer https://api.ocp4.example.com:6443
oc new-project authorization-secrets
oc create secret generic mysql --from-literal user=myuser --from-literal password=redhat123 --from-literal database=test_secrets --from-literal hostname=mysql
oc get pods
oc new-app --name mysql --image registry.redhat.io/rhel8/mysql-80:1
oc get pods
oc get pods -w
oc get pods
oc rsh mysql-84964b9fc8-wq97t
oc get pods
oc rsh mysql-6878dd799-wlz4p
 oc new-app --name quotes --image quay.io/redhattraining/famous-quotes:2.1
 oc get pods -l deployment=quotes -w
oc set env deployment/quotes --from secret/mysql --prefix QUOTES_
oc get pods -l deployment=quotes
oc get pods
oc logs quotes-77df54758b-mqdtf | head -n2
oc logs quotes-7776b797c5-bschp 
oc logs quotes-7776b797c5-bschp | head -n2
oc expose service quotes --hostname quotes.apps.ocp4.example.com
oc get routes
curl -s  http://quotes.apps.ocp4.example.com/env | grep QUOTES_
curl -s  http://quotes.apps.ocp4.example.com/env 
curl -s  http://quotes.apps.ocp4.example.com/env | grep QUOTES_
curl -s http://quotes.apps.ocp4.example.com/status
curl -s http://quotes.apps.ocp4.example.com/random
 oc delete project authorization-secrets
 lab authorization-secrets finish
oc login -u developer -p developer  https://api.ocp4.example.com:6443
oc new-project authorization-scc
oc new-app --name gitlab --image quay.io/redhattraining/gitlab-ce:8.4.3-ce.0
oc get pods
oc get pods -w
oc get pods
oc logs pod/gitlab-667fddc858-qg4hh
oc get pods
oc logs pod/gitlab-667fddc858-qg4hh
oc login -u admin -p redhat  https://api.ocp4.example.com:6443
oc get pods
oc get pod/gitlab-667fddc858-qg4hh -o yaml | oc adm policy scc-subject-review -f -
oc get pods
 oc create sa gitlab-sa
oc adm policy add-scc-to-user anyuid -z gitlab-sa
oc login -u developer -p developer
oc set serviceaccount deployment/gitlab gitlab-sa
oc get pods
oc expose service/gitlab --port 80 --hostname gitlab.apps.ocp4.example.com
oc get routes
 curl -sL http://gitlab.apps.ocp4.example.com/ | grep '<title>'
oc delete project authorization-scc
 lab authorization-scc finish
 lab authorization-review start
history
oc login -u developer -p developer  https://api.ocp4.example.com:6443
oc new-project authorization-review
oc create secret generic review-secret --from-literal user=wpuser --from-literal password=redhat123 --from-literal database=wordpress
oc get secret | grep wp
oc get secret 
oc new-app --name mysql --image registry.redhat.io/rhel8/mysql-80:1
oc set env deployment/mysql --prefix MYSQL_ --from secret/review-secret
 watch oc get pods -l deployment=wordpress
oc get pods
oc logs pod/wordpress-684c9d4ffc-lc4t7
oc login -u admin -p redhat
oc get pod/wordpress-68c49c9d4-wq46g -o yaml | oc adm policy scc-subject-review -f -
oc get pods
oc get pod/wordpress-684c9d4ffc-lc4t7 -o yaml  oc adm policy scc-subject-review -f -
 oc adm policy scc-subject-review -f -
oc login -u admin -p redhat
oc get pod/wordpress-684c9d4ffc-lc4t7 -o yaml oc get pod/wordpress-684c9d4ffc-lc4t7 -o yaml \
oc get pod/wordpress-684c9d4ffc-lc4t7 -o yaml | oc adm policy scc-subject-review -f -
oc create serviceaccount wordpress-sa
oc adm policy add-scc-to-user anyuid -z wordpress-sa
oc set serviceaccount deployment/wordpress wordpress-sa
watch oc get pods -l deployment=wordpress
oc whoami
history | grep deve
oc login -u developer -p developer  https://api.ocp4.example.com:6443
oc expose service/wordpress --hostname wordpress-review.apps.ocp4.example.com
 curl -s  http://wordpress-review.apps.ocp4.example.com/wp-admin/install.php | grep Installation
 lab authorization-review grade
 lab authorization-review finish
oc get csr
whoami
lab tab tab
lab 
lab -h
ls -l /usr/local/lib
ll
cd /usr/local
cp -rp lib /home/student/tmp1/opc
ll
cd etc
ll
..
alias ..='cd ../'
ll
.
..
cp -rp etc /home/student/tmp1/opc
ll
cd bin
ll
..
ll
cp -rp bin /home/student/tmp1/opc
ll
cd share
ll
cd applications/
ll
..
ll
..
ll
cd include/
ll
..
cd sbin
ll
vi rht-vmsetup-getcourse
ll
..
ll
cd src
ll
..
ll
source /usr/local/etc/ocp4.config
oc login -u kubeadmin -p ${RHT_OCP4_KUBEADM_PASSWD} https://api.ocp4.example.com:6443
oc get pods
ll
cd
cd DO280/
ll
cd labs/
ll
..
ll
..
ll
cp -rp DO280 /home/student/tmp1/opc
oc whoami
oc get all
sudo tcpdump -i eth0 -A -n port 80 | grep "angular"
oc new-project network-test
oc new-app --name sample-app --image quay.io/redhattraining/hello-world-nginx:v1.0
oc get pods
oc rsh sample-app-7cf4f6ff64-l229l curl 10.9.0.25:80
oc rsh sample-app-7cf4f6ff64-l229l curl 10.9.0.25:8080
oc rsh sample-app-7cf4f6ff64-l229l curl 10.9.0.26:8080
cd DO280/
cd solutions/
ll
cd network-policy/
ll
cp allow-specific.yaml /home/student/DO280/labs/network-policy
ll
..
pwd
ll
cd ..
ll
cd ..
ll
cd solutions/
ll
cd network-policy/
ll
cat allow-from-openshift-ingress.yaml
 oc create -n network-policy -f allow-from-openshift-ingress.yaml
 oc get networkpolicies -n network-policy
 oc login -u admin -p redhat
oc label namespace default network.openshift.io/policy-group=ingress
curl -s hello-network-policy.apps.ocp4.example.com
cd
cd DO280/solutions/
ll
cd network-review/
ll
cat php-https.yaml
 oc create -f php-https.yaml
oc get pods
oc create route passthrough php-https --service php-https --port 8443 --hostname php-https.apps.ocp4.example.com
oc get route
curl -v --cacert certs/training-CA.pem  https://php-https.apps.ocp4.example.com
cd
oc create route --help
oc --help
oc get route --help
oc get pods -o wide
oc get services
oc get route 
oc get pods -wide
oc get pods -o wide
oc get pods
oc expose --help
oc get pods
oc adm top pod
oc get pods
oc adm top pod
oc get dp
oc get deployment
alias ll='ls -lstra'
alias ..='cd ../'
oc get pods
oc rsh frontend-debug
oc rsh frontend-85d58fb74c-6c9xl
oc debug -t deployment/mysql ment/mysql 
oc debug -t deployment/mysql --image registry.access.redhat.com/ubi8/ubi:8.4
cd
lab network-sdn finish
tcpdump -i eth0 -A -n port 80
sudo tcpdump -i eth0 -A -n port 80
cd DO280/
ll
cd labs/
ll
cd network-policy/
ll
./display-project-info.sh
oc get pods
oc rsh test-54bc94685b-m72pf curl 10.9.0.25:8080 | grep -i hello
oc rsh test-54bc94685b-m72pf curl 172.30.12.129:8080 | grep -i hello
$ curl -s hello-network-policy.apps.ocp4.example.com | grep -i hello
curl -s hello-network-policy.apps.ocp4.example.com | grep -i hello
ll
oc project
oc projects
./display-project-info.sh 
cd
oc get routes
oc login -u admin -p redhat
oc get nodes -L env
oc label node master01 env=dev
oc get nodes -L env
oc get nodes 
oc get nodes -L
oc get nodes -L env
 oc label node master02 env=prod
oc get nodes -L env
 oc login -u admin -p redhat
oc label node -l env env-
oc get nodes -L env
 oc login -u admin -p redhat
oc get nodes -L client
oc get nodes -L env
oc get nodes -L client
cd DO280/labs/schedule-limit/
ll
vi hello-limit.yaml 
ll
cd DO280/labs/schedule-limit/ll
ll
vi hello-limit.yaml
ll
vi hello-limit.yaml 
oc create --save-config -f ~/DO280/labs/schedule-limit/hello-limit.yaml
cd
cd DO280/labs/schedule-limit/
ll
vi hello-limit.yaml 
ll
cp hello-limit.yaml _hello-limit.yaml
ll
cat hello-limit.yaml
diff hello-limit.yaml _hello-limit.yaml
alias ll='ls -lstra'
alias ..='cd ../'
ll
cd DO280/
ll
cd labs
ll
cd network-sdn/
ll
..
cd -
ll
cd
ll
 oc debug -t deployment/frontend
 oc login -u developer -p developer https://api.ocp4.example.com:6443
oc new-project network-ingress
oc create -f ~/DO280/labs/network-ingress/todo-app-v1.yaml
oc status
oc get pods
oc status
oc get pods
oc expose svc todo-http --hostname todo-http.apps.ocp4.example.com
oc get routes
 ip addr | grep 172.25.250.9
cd DO280/
ll
cd labs
ll
cd network-ingress/
ll
pwd
oc create route edge todo-https --service todo-http --hostname todo-https.apps.ocp4.example.com
oc get route
 curl -I -v  https://todo-https.apps.ocp4.example.com
oc get svc todo-http -o jsonpath="{.spec.clusterIP}{'\n'}"
 oc debug -t deployment/todo-http --image registry.access.redhat.com/ubi8/ubi:8.4
oc get route
oc delete route todo-https
oc get route
cd certs/
ll
cat openssl-commands.txt 
openssl req -new   -subj "/C=US/ST=North Carolina/L=Raleigh/O=Red Hat/CN=todo-https.apps.ocp4.example.com"   -key training.key -out training.csr
ll
 openssl genrsa -out training.key 4096
ll
openssl req -new   -subj "/C=US/ST=North Carolina/L=Raleigh/O=Red Hat/CN=todo-https.apps.ocp4.example.com"   -key training.key -out training.csr
ll
vi training.csr
vi training.key
cat openssl-commands.txt
openssl x509 -req -in training.csr   -passin file:passphrase.txt   -CA training-CA.pem -CAkey training-CA.key -CAcreateserial   -out training.crt -days 1825 -sha256 -extfile training.ext
ll
vi training.crt
..
ll
ll /usr/local/etc/ssl/certs
oc create secret tls todo-certs --cert certs/training.crt --key certs/training.key
oc create -f todo-app-v2.yaml
oc get pods
oc describe pod todo-https-6c87f66c89-wm6rt  | grep -A2 Mounts
 oc create route passthrough todo-https --service todo-https --port 8443 --hostname todo-https.apps.ocp4.example.com
oc get route
oc get pods
 curl -vv -I --cacert certs/training-CA.pem https://todo-https.apps.ocp4.example.com/
oc get svc todo-https -o jsonpath="{.spec.clusterIP}{'\n'}"
 oc debug -t deployment/todo-https --image registry.access.redhat.com/ubi8/ubi:8.4
cd
oc login -u developer -p developer  https://api.ocp4.example.com:6443
 oc new-project network-policy
 oc new-app --name hello --image quay.io/redhattraining/hello-world-nginx:v1.0
 oc new-app --name test --image quay.io/redhattraining/hello-world-nginx:v1.0
oc get route
oc expose service hello
oc get route
oc get pods
oc get route
oc projects
oc project network-policy
cd DO280/labs/network-policy/
ll
vi deny-all.yaml 
..
ll
..
ll
cd solutions/
ll
cd network-policy/
ll
cat deny-all.yaml 
..
cd labs/
cd network-policy/
ll
cat deny-all.yaml 
curl -s hello-network-policy.apps.ocp4.example.com | grep Hello
oc get pods
oc rsh test-54bc94685b-m72pf curl 10.9.0.25:8080
oc projects
ll
 oc create -f deny-all.yaml
oc get pods
curl -s hello-network-policy.apps.ocp4.example.com | grep Hello
oc project network-test
oc get pods
oc rsh sample-app-7cf4f6ff64-l229l curl 10.9.0.25:8080  grep -i hello
ll
vi allow-specific.yaml 
pwd
ll
vi allow-specific.yaml
ll
pwd
 oc create -n network-policy -f allow-specific.yaml
 oc get networkpolicies -n network-policy
oc login -u admin -p redhat
 oc label namespace network-test name=network-test
 oc describe namespace network-test
oc login -u developer -p developer
oc get pods
oc rsh sample-app-7cf4f6ff64-l229l curl 10.9.0.26:8080 | grep -i hello
oc rsh sample-app-7cf4f6ff64-l229l curl 10.9.0.25:8080 | grep -i hello
oc rsh sample-app-7cf4f6ff64-l229l curl 10.9.0.25:8181 | grep -i hello
oc rsh sample-app-7cf4f6ff64-l229l curl 10.9.0.26:8181 | grep -i hello
oc rsh sample-app-7cf4f6ff64-l229l curl 10.9.0.25:8080 | grep -i hello
cd
 lab network-policy finish
history | grep deve
oc login -u developer -p developer  https://api.ocp4.example.com:6443
oc new-project network-review
cd DO280/labs/network-review/
ll
vi php-http.yaml
..
ll
..
cd solutions/
ll
cd network-review/
ll
vi php-http.yaml
oc create -f php-http.yaml
pwd
oc get pods
oc expose svc php-http --hostname php-http.apps.ocp4.example.com
oc get routes
pwd
ll
oc create -f deny-all.yaml 
curl http://php-http.apps.ocp4.example.com
ll
oc create -f allow-from-openshift-ingress.yaml
oc get pods
oc get route
 oc login -u admin -p redhat
oc label namespace default network.openshift.io/policy-group=ingress
for X in {1..4}; do curl -s http://php-http.apps.ocp4.example.com | grep "PHP"; done
 oc login -u developer -p developer
ll
..
.
..
cd labs/
cd network-review/
ll
cd certs/
ll
cat openssl-commands.txt 
openssl req -new -key training.key -subj "/C=US/ST=North Carolina/L=Raleigh/O=Red Hat/\
CN=php-https.apps.ocp4.example.com" -out training.csr
ll
openssl x509 -req -in training.csr -CA training-CA.pem -CAkey training-CA.key -CAcreateserial -passin file:passphrase.txt -out training.crt -days 3650 -sha256 -extfile training.ext
cat passphrase.txt
ll
..
ll
pwd
oc create secret tls php-certs --cert certs/training.crt --key certs/training.key
oc get secrets
cd
 oc login -u developer -p developer  https://api.ocp4.example.com:6443
 oc new-project schedule-pods
oc new-app --name hello --image quay.io/redhattraining/hello-world-nginx:v1.0
oc get nodes
oc get pods
oc get route
oc get routes
$ oc expose svc/hello
oc expose service/hello
oc get routes
 oc scale --replicas 4 deployment/hello
 oc get pods -o wide
 oc login -u developer -p developer  https://api.ocp4.example.com:6443
oc edit deployment/hello
oc describe deployment/hello
oc get pods
 oc get pods -o wide
oc describe deployment/hello
oc edit deployment/hello
oc get nodes -L env
 oc get pods -o wide
oc projects
oc delete project schedule-pods
oc projects
oc login -u developer -p developer
oc projects
oc project schedule-pods-ts
oc get pods
 oc describe pod hello-ts-5bbd56696f-jrvs6
oc login -u developer -p developer
oc edit deployment/hello-ts
oc get pods
oc get pods -o wide
oc project
oc whoami
oc set resources deployment hello-world-nginx --requests cpu=10m,memory=20Mi --limits cpu=80m,memory=100Mi
oc login -u developer -p developer  https://api.ocp4.example.com:6443
oc new-project schedule-limit
oc create deployment hello-limit --image quay.io/redhattraining/hello-world-nginx:v1.0 --dry-run=client -o yaml > ~/DO280/labs/schedule-limit/hello-limit.yaml
cat ~/DO280/labs/schedule-limit/hello-limit.yaml
vi ~/DO280/labs/schedule-limit/hello-limit.yaml
oc create --save-config -f ~/DO280/labs/schedule-limit/hello-limit.yaml
oc get pods
oc get pods -o wide
 oc get events --field-selector type=Warning
oc get pods
oc create --save-config -f ~/DO280/labs/schedule-limit/hello-limit.yaml
oc deployment
oc get deployment
oc delete deployment hello-limit
oc create --save-config -f ~/DO280/labs/schedule-limit/hello-limit.yaml
oc get pods
 oc get events --field-selector type=Warning
oc edit deployment/hello-limit
oc delete deployment hello-limit
oc get pods
oc create deployment hello-limit --image quay.io/redhattraining/hello-world-nginx:v1.0 --dry-run=client -o yaml > ~/DO280/labs/schedule-limit/hello-limit.yaml
oc get pods
oc create --save-config -f ~/DO280/labs/schedule-limit/hello-limit.yaml
oc get pods
oc get events --field-selector type=Warning
oc edit deployment hello-limit 
vi ~/DO280/labs/schedule-limit/hello-limit.yaml
oc login -u developer -p developer  https://api.ocp4.example.com:6443
oc new-project schedule-limit
oc create deployment hello-limit --image quay.io/redhattraining/hello-world-nginx:v1.0 --dry-run=client -o yaml > ~/DO280/labs/schedule-limit/hello-limit.yaml
oc get pods
oc create --save-config -f ~/DO280/labs/schedule-limit/hello-limit.yaml
oc get pods
oc get events --field-selector type=Warning
oc apply -f ~/DO280/labs/schedule-limit/hello-limit.yaml
oc get pods
oc scale --replicas 4 deployment/hello-limit
oc get pods
oc get events --field-selector type=Warning
oc delete all -l app=hello-limit
oc get pods
oc create --save-config -f ~/DO280/labs/schedule-limit/loadtest.yaml
oc get routes
curl -X GET http://loadtest.apps.ocp4.example.com/api/loadtest/v1/mem/150/60
 oc delete all -l app=loadtest
oc create deployment hello-limit --image quay.io/redhattraining/hello-world-nginx:v1.0 --dry-run=client -o yaml > ~/DO280/labs/schedule-limit/hello-limit.yaml
history
ll
echo $alias
alias ll='ls -lstra'
alias ..='cd ../'
 lab network-sdn star
 lab network-sdn start
oc login -u developer -p developer https://api.ocp4.example.com:6443
oc new-project network-sdn
cd ~/DO280/labs/network-sdn
ll
oc create -f todo-db.yaml
cat todo-db.yaml 
oc status
oc get pods
oc cp db-data.sql mysql-68b778f957-9v5j9:/tmp/
oc rsh mysql-68b778f957-9v5j9 /bin/bash
oc create -f todo-frontend.yaml
oc get pods
 oc expose service frontend --hostname todo.apps.ocp4.example.com
oc get routes
oc get services
oc get routes
oc get pods
oc logs frontend-85d58fb74c-6c9xl
oc get service/mysql -o jsonpath="{.spec.clusterIP}{'\n'}"
oc debug -t deployment/frontend
oc get service/mysql -o jsonpath="{.spec.clusterIP}{'\n'}"
 oc debug -t deployment/mysql --image registry.access.redhat.com/ubi8/ubi:8.4
oc get service/frontend -o jsonpath="{.spec.clusterIP}{'\n'}"
 oc debug -t deployment/mysql --image registry.access.redhat.com/ubi8/ubi:8.4
 oc get pods -o wide -l name=frontend
 oc debug -t deployment/mysql --image registry.access.redhat.com/ubi8/ubi:8.4
oc get svc
 oc describe svc/frontend
oc describe deployment/frontend | grep -A1 Labels
oc edit svc/frontend
 oc describe svc/frontend
history
oc get pods
ll
cat todo-frontend.yaml
vi todo-db.yaml
oc get pods
oc logs frontend-85d58fb74c-6c9xl
oc logs mysql-68b778f957-9v5j9
oc logs frontend-85d58fb74c-6c9xl
oc get routes
oc logs frontend-85d58fb74c-6c9xl
 oc describe svc/mysql
 oc describe svc/frontend
oc get pods
cd
lab network-ingress start
lab network-ingress finish
 lab network-policy start
 lab network-review start
cd
lab network-review grade
lab network-review finish
lab schedule-pods start
lab schedule-pods finish
 lab schedule-limit start
 lab schedule-limit finish
 lab schedule-limit start
alias ll='ls -lstra'
alias ..='cd ../'
ll
cd DO280/
ll
cd labs/
ll
..
cd -
öö
ll
cd schedule-limit/
ll
cat hello-limit.yaml 
oc whoami
oc get pods
oc login -u admin -p redhat
oc create quota project-quota --hard cpu="3",memory="1G",configmaps="2" -n schedule-limit
oc get quota
oc login -u developer -p developer
oc create configmap my-config
oc get cm
oc get configmap
oc get pods
oc adm create-bootstrap-project-template -o yaml > /tmp/project-template.yaml
cat /tmp/project-template.yaml
ll
pwd
cd ..
..
cd solutions/
ll
cd schedule-limit/
ll
vi project-template.yaml 
oc get projec
oc get projects
echo $PROJECT_NAME
vi project-template.yaml 
PROJECT_NAME=protemp
echo $PROJECT_NAME
oc create -f ./project-template.yaml 
oc whoami
oc edit projects.config.openshift.io/cluster
oc project
oc login -u admin -p redhat
oc create -f ./project-template.yaml 
oc edit projects.config.openshift.io/cluster
watch oc get pods -n openshift-apiserver
oc get pods -n openshift-apiserver
 lab schedule-limit finish
cd
 lab schedule-limit finish
oc get pods
oc whoami
oc get pods -n openshift-apiserver
curl -Ls  https://quay.io/v2/redhattraining/httpd-parent/tags/list  | python -m json.tool
 lab schedule-scale start
oc delete project schedule-scale
 lab schedule-scale finish
lab schedule-review start
 lab schedule-review grade
oc get deployment loadtest -o jsonpath='{.spec.template.spec.nodeSelector} {"\n"}'
oc edit deployment loadtest
oc get deployment loadtest -o jsonpath='{.spec.template.spec.nodeSelector} {"\n"}'
 lab schedule-review grade
lab console-admin start
lab console-admin finish
lab console-workloads start
cd DO280/
cd labs/
..
cd so
ll
cd schedule-scale/
ll
..
cd ..
ll
cd solutions/
cd schedule-scale/
ll
cat loadtest.yaml 
diff loadtest.yaml /home/student/DO280/labs/schedule-scale/loadtest.yaml 
ll
pwd
 oc create --save-config -f ./loadtest.yaml 
oc get hpa/loadtest
oc get route
curl -X GET  http://loadtest-schedule-scale.apps.ocp4.example.com/api/loadtest/v1/cpu/1
pwd
..
alias ..='cd ../'
..
cd labs/schedule-scale/
ll
./curl-route.sh 
cd
cd DO280/
cd solutions/
ll
..
cd labs/
cd schedule-review/
ll
..
oc create deployment loadtest --dry-run=client --image quay.io/redhattraining/loadtest:v1.0 -o yaml > ~/DO280/labs/schedule-review/loadtest.yaml
 oc get pods -n openshift-apiserver
oc new-project template-test
oc get resourcequotas,limitranges
oc whoami
oc get resourcequotas,limitranges
oc projects
oc login -u developer -p developer
oc get pods
oc get resourcequotas,limitranges
 oc login -u admin -p redhat
oc delete project schedule-limit
oc delete project template-test
oc login -u developer -p developer  https://api.ocp4.example.com:6443
 oc new-project schedule-scale
oc get pods
oc describe pod/loadtest-5b96d5f9f-m95tc | grep -A2 -E "Limits|Requests"
oc get pods
oc get pods -o wide
oc deployment
oc get deployment
oc scale --replicas 5 deployment/loadtest
oc get pods
oc get pods -wait
oc get pods -wide
oc get pods
 oc autoscale deployment/loadtest --min 2 --max 10 --cpu-percent 50
oc get pods
oc get nodes
oc get pods
oc login -u admin -p redhat  https://api.ocp4.example.com:6443
oc get nodes -L tier
oc label node master01 tier=gold
oc get nodes -L tier
oc label node master02 tier=silver
oc get nodes -L tier
 oc login -u developer -p developer
oc new-project schedule-review
oc login -u admin -p redhat
oc create quota review-quota --hard cpu="1",memory="2G",pods="20"
oc login -u admin -p redhat https://api.ocp4.example.com:6443
 oc whoami --show-console
 htpasswd -n -b tester redhat
oc login -u admin -p redhat  https://api.ocp4.example.com:6443
oc whoami --show-console
d DO280/
cd DO280/
ll
cd labs/
ll
cd console-workloads/
ll
cat deployment.yaml 
oc new-app --name scaling --image quay.io/redhattraining/scaling:v1.0
oc expose svc/scaling
oc get route
oc scale --replicas 3 deployment/scaling
 oc get pods -o wide -l deployment=scaling
 oc get pods -o wide 
 oc get pods -o wide -l deployment=scaling
watch oc get hpa/loadtest
oc get hpa/loadtest
oc get pods
oc get hpa/loadtest
oc get pods
oc get hpa/loadtest
oc get pods
oc get hpa/loadtest
oc get pods
oc get hpa/loadtest
oc get pods
alias ll='ls -lstra'
ll
pwd
..
...
cd ..
cd labs/
cd schedule-scale/
ll
pwd
 watch oc get hpa/loadtest
cd
cd DO280/labs/schedule-review/
ll
cat loadtest.yaml 
vi loadtest.yaml 
oc get pods
vi loadtest.yaml 
oc create --save-config -f ./loadtest.yaml 
oc get pods
oc edit deployment/loadtest
oc get pods
oc describe pod/loadtest-668f7fc94b-p9mpz
oc describe pod/loadtest-668f7fc94b-p9mpz | grep req
oc describe pod/loadtest-668f7fc94b-p9mpz | grep r
oc describe pod/loadtest-668f7fc94b-p9mpz | grep re
oc describe pod/loadtest-668f7fc94b-p9mpz | grep Req
oc describe pod/loadtest-668f7fc94b-p9mpz | grep -A2 Req
oc expose deployment/loadtest --port 80 --target-port 8080
oc get route
oc get service
 oc expose service/loadtest --name loadtest
oc get service
oc get route
curl loadtest-schedule-review.apps.ocp4.example.com/api/loadtest/v1/healthz
oc get pods
 oc autoscale deployment/loadtest --name loadtest --min 2 --max 40 --cpu-percent 70
oc get pods
curl  http://loadtest-schedule-review.apps.ocp4.example.com/api/loadtest/v1/cpu/3
oc get pods
curl  http://loadtest-schedule-review.apps.ocp4.example.com/api/loadtest/v1/cpu/3
oc login -u admin -p redhat  https://api.ocp4.example.com:6443
cd DO280/
ll
ls -lsRt
ll
cd labs/
ll
cd console-metrics/
ll
cat load.sh 
./load.sh 
cd 
lab console-metrics finish
lab console-review start
top
oc projects
oc project console-apps
of get pods
oc get pods
oc get route
oc get all
oc get pods
oc get imagemanifestvulns.secscan.quay.redhat.com --selector=console-apps/hello-world-6cd8c48f7c-qxnlf -o jsonpath='{.items[*].spec.features[*].vulnerabilities[*].name}'
oc get pods
oc get imagemanifestvulns.secscan.quay.redhat.com --selector=console-apps/hello-world-6cd8c48f7c-qxnlf -o jsonpath='{.items[*].spec.features[*].vulnerabilities[*].name}'
oc get imagemanifestvulns.secscan.quay.redhat.com --selector=console-apps/hello-world-6cd8c48f7c-qxnlf 
oc project
oc get all
oc get pods
oc get imagemanifestvulns.secscan.quay.redhat.com --selector=console-apps/hello-world-685d5cf88-ddhrt -o jsonpath='{.items[*].spec.features[*].vulnerabilities[*].name}'
lab console-workloads finish
lab console-metrics start
history | greo logi
history | grep logi
oc login -u admin -p redhat  https://api.ocp4.example.com:6443
 htpasswd -n -b dba redhat
htpasswd -n -b tester redhat
 htpasswd -n -b dba redhat
htpasswd -n -b tester redhat
oc whoami
oc login -u dba -p redhat  https://api.ocp4.example.com:6443
oc project
 oc new-app --name database --image registry.redhat.io/rhel8/mysql-80:1 -e MYSQL_USER=famous -e MYSQL_PASSWORD=famous -e MYSQL_DATABASE=famous
cd DO280/
cd labs/
ll
cd console-review/
ll
cat deployment.yaml 
oc project console-review
oc whoami
cd
 lab console-review grade
history
lab network-ingress start
ll
cd DO280/
ll
cd labs
ll
..
cd ..
cd solutions/
ll
cd ..
cd labs/network-ingress/
ll
cat tcpdump-command.txt
cat todo-app-v1.yaml
..
cd ..
cd DO280/
ll
cd ..
ll
cp -rip DO280/ /home/student/mio/DO180-apps
cd DO280/
ll
cd labs/
ll
..
ll
cd ..
alias ..='cd ../'
..
ll
cd mio
ll
git clone https://github.com/pinoproxie/DO180-apps.git
ll
cd D
cd DO180-apps/
pwd
ll
git add .
cd temps
ll
..
ll
..
ll
cp * DO180-apps/temps/
ll
cd DO180-apps/
cd temps/
ll
..
ll
git add .
git commit -m "update"
git push
..
ll
..
ll
cd DO280/
ll
cd solutions/
ll
..
ll
cd DO280/labs/
ll
